"""
Intento de stackear voids. Lo comence otra vez en Marzo 2017 copiando el coeffs1.py

Edit Jueves 29/06/17: Trato de corregir --> Boostrap definido pero no utilizado
"""

#---------------------------------
"""
Clasificacion de voids
"""
vr = [2,3,10,18,21]
vs = [0,1,4,5,6,7,8,9,11,12,13,14,15,16,17,19,20,22,23,24,25,26]

#Dudosos = 0,3,4,5,7,12,13,14,18,19,22,23
#Con estructura = 2,4,5,7,8,9,10,12,14,15,16,18,19,21,24,25

#NoDudosos = 1,2,6,8,9,10,11,15,16,17,20,21,24,25,26
#Sin Estructura = 0,1,3,6,11,13,17,20,22,23,26
#NoDudosos y Sin Estructura = 1,6,11,17,20,26
vs_ok = [1,6,11] # 3 mas grandes
#---------------------------------


rmin, rmax = .7, 1.2
#perc = 75

voidsFinal = ascii.read('voidsFinal_gxstracers.txt')#,format='commented_header')#,converters=converters)
N = range(len(voidsFinal))
#N = vs_ok
#N = vr
sec = 456

#----------------------------------------------------
"""
+ Lectura de Datos
+ Creacion de Tabla 'gxs' (restringida en Masa) con Pos., Spin, Masa, SFR
+ Creacion del periodicCKDTree
"""

print 'Reading data...'

profile = ascii.read('voidsProfileFinal.txt')
#subgroups = il.groupcat.loadSubhalos(basePath,135)

gxs = Table(subgroups['SubhaloPos'],names=['x','y','z'],dtype=['float64','float64','float64'])
col_id = Table.Column([i for i in range(len(gxs))],name='ID')
col_sp = Table.Column(subgroups['SubhaloSpin'],name='sp',dtype='float64')
col_sfr = Table.Column(subgroups['SubhaloSFR'],name='SFR')
col_m = Table.Column(subgroups['SubhaloMass'],name='mass',dtype='float64')
gxs.add_columns([col_sp,col_m,col_sfr,col_id])


col_spn = Table.Column(np.sum(np.abs(gxs['sp'])**2,axis=-1)**(1./2),name='sp_n',dtype='float64')
gxs.add_column(col_spn,index=5)

g_m,g_b,g_rvalue,g_pvalue,g_std=scipy.stats.linregress(np.log10(gxs['mass']),np.log10(gxs['sp_n'])) # Este ajuste es de las galaxias en total (ajuste global "g_...")

gxs = gxs[(np.log10(gxs['mass'])>-1.)]


lbox = 75000. #kpc
bounds = [lbox,lbox,lbox]
tree = spatial.cKDTree(data=np.column_stack((gxs['x'],gxs['y'],gxs['z'])),boxsize=lbox)


"""
+ Calculo de cosenos de angulos 3D 
+ Histograma de la Distribucion de Cosenos
+ Histograma de SFR para gxs con Cosenos cercanos y lejanos a 0
"""
cos=[]
cos1=[]
for nv in N:
	print nv
	#---------------------------------------------------------
	"""
	+ 'gals' son las galaxias en el shell del void
	"""

	x,y,z,r = voidsFinal[nv]

	idx1 = tree.query_ball_point([x,y,z],r*rmax)
	idx2 = tree.query_ball_point([x,y,z],r*rmin)
	shell = [g for g in idx1 if g not in idx2]

	gals = gxs[shell]
	print 'N of galaxies:',len(gals)

	#-------------------------------------------------------
	"""
	Plot del perfil de densidad del Void
	"""
	#plt.figure(1)
	#plt.plot(profile['r'],profile['Void{}'.format(nv)])

	#-------------------------------------------------------
	"""
	+ Seleccion de la muestra segun la relacion J vs Mass
	+ Histogramas de Cosenos para las dos poblaciones (#)
	"""
	m,b,rvalue,pvalue,std=scipy.stats.linregress(np.log10(gxs['mass']),np.log10(gxs['sp_n'])) # El ajuste tiene que ser con las 'gxs' (no con las 'gals')
	m1 = -1./m
	b1 = -.7*(m-m1)+b
	b2 = -.3*(m-m1)+b

	M = np.log10(gals['mass'])
	S = np.log10(gals['sp_n'])

	#::::::::::::::::::::::::::::::::
	# Limites en el espacio Spin-Masa

	#gals_h = gals[(S > M*m1+b1)&(S < M*m1+b2)&(S < M*m+b)] # Limite superior e inferior en el espacio Spin-Masa
	#gals_h = gals[(S < M*m1+b1)&(S < M*m+b)] # Solo limite superior
	#gals_h = gals[(S > M*m1+b2)&(S < M*m+b)] # Solo limite inferior
	#gals_h = gals[(S < M*m+b)] # Solo limite en Spin
	#gals_h = gals
	#-------------------
	# Limites lineales

	#Alto Spin
	if sec == 1: gals_h = gals[(M < -.7)&(S > M*m+b)] # Solo limite superior
	if sec == 2: gals_h = gals[(M > -.7)&(M < -.3)&(S > M*m+b)] # Limite superior e inferior en el espacio Spin-Masa
	if sec == 3: gals_h = gals[(M > -.3)&(S > M*m+b)] # Solo limite inferior
	if sec == 12: gals_h = gals[(M < -.3)&(S > M*m+b)] # Solo limite superior
	if sec == 23: gals_h = gals[(M < -.7)&(S > M*m+b)] # Solo limite inferior
	if sec == 123: gals_h = gals[(S > M*m+b)] # Solo limite en Spin

	#Bajo Spin
	if sec == 4: gals_h = gals[(M < -.7)&(S < M*m+b)] # Solo limite superior
	if sec == 5: gals_h = gals[(M > -.7)&(M < -.3)&(S < M*m+b)] # Limite superior e inferior en el espacio Spin-Masa
	if sec == 6: gals_h = gals[(M > -.3)&(S < M*m+b)] # Solo limite inferior
	if sec == 45: gals_h = gals[(M < -.3)&(S < M*m+b)] # Solo limite superior
	if sec == 56: gals_h = gals[(M < -.7)&(S < M*m+b)] # Solo limite inferior
	if sec == 456: gals_h = gals[(S < M*m+b)] # Solo limite en Spin

	if sec == 'all': gals_h = gals
	#::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::


	#plt.figure(2)
	#plt.scatter(M,S,c='gray')
	#plt.scatter(np.log10(gals_h['mass']),np.log10(gals_h['sp_n']),c='blue')
	#plt.vlines(-.7,0,3,color='r',linestyle='dashed')
	#plt.vlines(-.3,0,3,color='r',linestyle='dashed')
	#plt.plot(M,M*m+b,ls=':')
	#plt.plot(M,M*g_m+g_b,ls='--')
	#plt.show()

	print 'N of final galaxies:',len(gals_h)

	#-----------------------------------------------------------


	for i in range(len(gals_h)):
		u = [gals_h[i]['x']-x,gals_h[i]['y']-y,gals_h[i]['z']-z]
		v = gals_h[i]['sp']
		c = abs( np.dot(u,v)/(np.linalg.norm(u)*np.linalg.norm(v)) )
		cos.append( c )
		cos1.append( c )
		cos1.append( -c )
		#cos.append( np.dot(u,v)/(np.linalg.norm(u)*np.linalg.norm(v)) )
	
#----------------------------------------------------
"""
+ Calculo y Grafico de la ECDF
+ Fitteado de la resta ECDF-Recta Lineal Random
+ Coeffs a1 a2

"""

#------
# Genero datos artificiales para plot del poster AAA2017
gauss = np.random.normal(0.,.6,100000)
gauss = gauss[abs(gauss)<1.]
gauss1 = gauss[(gauss>0.)]*-1.+1.
gauss2 = gauss[(gauss<0.)]*-1.-1.
gaussinv = np.concatenate((gauss1,gauss2)) 

unif = np.random.uniform(-1.,1.,100000)


cos1 = gauss
#----


cos_h = np.sort(cos1)

ecdf = ECDF(cos_h) # Empirical cumulated distribution function

y = ecdf(cos_h)-(cos_h+1.)/2. # Para cuando tomamos el valor verdadero de cos (no el absoluto) 
							   # Cambia tmb la 'func' de abajo

def func(x,a,b,c,d,e):
	return a + b*np.sin( np.pi*(x+1.)/2. ) + c*np.sin( 2.*np.pi*(x+1.)/2. ) + d*np.sin( 3.*np.pi*(x+1.)/2. ) + e*np.sin( 4.*np.pi*(x+1.)/2. )
def dfunc(x,b,c,d,e):
	return np.pi/2.*b*np.cos( np.pi*(x+1.)/2. ) + np.pi*c*np.cos( 2.*np.pi*(x+1.)/2. ) + np.pi*3./2.*d*np.cos( 3.*np.pi*(x+1.)/2. ) + np.pi*2.*e*np.cos( 4.*np.pi*(x+1.)/2. )


x = np.array(cos_h)

coeffs, cov = curve_fit(func, x, y)
yfit = func(x,coeffs[0],coeffs[1],coeffs[2],coeffs[3],coeffs[4])
d_yfit = dfunc(x,coeffs[1],coeffs[2],coeffs[3],coeffs[4])

a1 = coeffs[1]
a2 = coeffs[2]
a3 = coeffs[3]
a4 = coeffs[4]
print 'a1=',a1,'; a2=',a2,'; a3=',a3,'; a4=',a4

#---Bootstrap error for a2-----------------------------------------------
#def bootstrap(data, num_samples):
#	n = len(data)
#	idx = np.random.randint(0, n, (num_samples, n))
#	samples = data[idx]
#	a2_arr = []
#	for x in samples:
#		#print 
#		y = ecdf(x)-(x+1.)/2.
#		coeffs, cov = curve_fit(func, x, y)
#		a2_arr.append( coeffs[2] )
#		
#	stat = np.std(a2_arr)
#	#return np.std(stat)
#	return a2_arr,stat
#
#a2_arr, stat = bootstrap(x,100)
#
#plt.axvline(a2, label='a2 coeff')
#plt.axvline(a2 + stat, ls='--')
#plt.axvline(a2 - stat, ls='--')
#plt.axvline(np.mean(a2_arr), c='r', label='a2 BS Mean')
#plt.axvline(np.mean(a2_arr) + stat, ls='--', c='r', label='a2 BS Mean Error')
#plt.axvline(np.mean(a2_arr) - stat, ls='--', c='r')
#plt.hist(a2_arr, bins=50)
#plt.legend()


#------------------------------------------------------------------------
gs = gridspec.GridSpec(3, 1)

fig = plt.figure(figsize=(20,10))#,dpi=100)
#if N == range(len(voidsFinal)):
#	fig.suptitle('AllVoids_Sec{}'.format(sec),size=14)
#else:
#	fig.suptitle('Voids{}_Sec{}'.format(N,sec),size=14)


ax1 = fig.add_subplot(gs[0,0])
ax2 = fig.add_subplot(gs[1,0])
ax3 = fig.add_subplot(gs[2,0])

errN = ax1.hist(cos1,bins=40,normed=True,histtype='stepfilled',cumulative=False,alpha=30.)
ax1.plot(x,d_yfit+.5,'r--')
#ax1.set_xlabel('$cos \\theta (High Spin)$',size=18)
#ax1.legend()

ax2.plot(cos_h,ecdf(cos_h))
ax2.plot(cos_h,(cos_h+1.)/2.,'b--')
ax2.plot(cos_h,yfit+(cos_h+1.)/2.,'r--')
#ax2.set_xlabel('cos',size=18)

ax3.step(x,y)
ax3.plot(x,yfit,'r--')
#ax3.set_xlabel('cos',size=18)


ax1.set_title('Cos (Mirrored)',size=12)
ax2.set_title('ECDF',size=12)
ax3.set_title('Residues',size=12)

#plt.savefig('posterAAA2017_AllVoids_LowSpin.svg')
#plt.show()

if N == range(len(voidsFinal)):
	plt.savefig('PlotsAlignments/alignment_AllVoids_Sec{}.pdf'.format(sec))
	plt.savefig('PlotsAlignments/alignment_AllVoids_Sec{}.png'.format(sec))
else:
	plt.savefig('PlotsAlignments/alignment_Voids{}_Sec{}.pdf'.format(N,sec))
	plt.savefig('PlotsAlignments/alignment_Voids{}_Sec{}.png'.format(N,sec))
	


#------------------------------------------------------------------------
Nfit = errN[0][20:40]

y = Nfit/np.mean(Nfit)
x = np.cos(2*errN[1][20:40])
#x = np.cos([ran.uniform(0,np.pi/2.) for i in range(20)])

slope, intercept, r_value, p_value, std_err = scipy.stats.linregress(x,y)
print 'Amplitude error:',slope
#plt.scatter(x,y)
#plt.show()


