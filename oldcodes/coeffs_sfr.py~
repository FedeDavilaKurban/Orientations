"""
Ver los alineamientos y la sfr

Copiado del programa coeffs_AllVoids_SepGraph.py
"""
#---------------------------------


rmin, rmax = .7, 1.1
#----------------------------------------------------
"""
+ Lectura de Datos
+ Creacion de Tabla 'gxs' (restringida en Masa) con Pos., Spin, Masa, SFR
+ Creacion del periodicCKDTree
"""

print 'Reading data...'
#voidsFinal = ascii.read('voidsFinal_gxstracers.txt')#,format='commented_header')#,converters=converters)
profile = ascii.read('voidsProfileFinal.txt')
voidsFinal = ascii.read('voidsFinal_gxstracers.txt')

massfilter = (np.log10(subgroups['SubhaloMass'])>-1.)

gxs = Table(subgroups['SubhaloPos'],names=['x','y','z'],dtype=['float64','float64','float64'])
#N = len(gxs)
#N = len(subgroups['SubhaloPos'][(np.log10(subgroups['SubhaloMass'])>-1.)])
#rho_m = float(N) / (75000.**3)

col_id = Table.Column([i for i in range(len(gxs))],name='ID')
col_sp = Table.Column(subgroups['SubhaloSpin'],name='sp',dtype='float64')
col_sfr = Table.Column(subgroups['SubhaloSFR'],name='SFR')
col_m = Table.Column(subgroups['SubhaloMass'],name='mass',dtype='float64')
col_n = Table.Column(subgroups['SubhaloLen'],name='N of particles',dtype='int64')
gxs.add_columns([col_sp,col_m,col_sfr,col_n,col_id])


col_spn = Table.Column(np.sum(np.abs(gxs['sp'])**2,axis=-1)**(1./2),name='sp_n',dtype='float64')
gxs.add_column(col_spn,index=5)

gxs = gxs[(np.log10(gxs['mass'])>-1.)]

g_m,g_b,g_rvalue,g_pvalue,g_std=scipy.stats.linregress(np.log10(gxs['mass']),np.log10(gxs['sp_n'])) # Este ajuste es de las galaxias en total (ajuste global "g_...")



#converters = {'x': [ascii.convert_numpy(np.float64)],
#	      'y': [ascii.convert_numpy(np.float64)],
#	      'z': [ascii.convert_numpy(np.float64)],
#	      'r': [ascii.convert_numpy(np.float64)]}

lbox = 75000. #kpc
bounds = [lbox,lbox,lbox]
tree = spatial.cKDTree(data=np.column_stack((gxs['x'],gxs['y'],gxs['z'])),boxsize=lbox)
nv=0
for _ in range(1): 
#for _ in range(len(voidsFinal)): 
	#-------------------------------------------------------
	"""
	Plots
	"""
	ax = plt.subplot2grid((1, 2), (0, 0))
	plt.tight_layout()
	 
	ax1 = plt.subplot2grid((2, 2), (0, 0),colspan=2)
	ax2 = plt.subplot2grid((2, 2), (1, 0),colspan=2) 
	#ax3 = plt.subplot2grid((3, 3), (2, 0),colspan=3)
			
	ax1.set_title('Void {}'.format(nv),size=12)
	ax1.set_xlabel(r'cos($\theta$)')
	ax1.set_ylabel('Residues')
	
	ax2.set_title('High Spin')
	ax2.set_ylabel('SFR')
	#ax2.set_xscale('log')
	#ax2.set_yscale('log')
	
	ax3.set_title('Low Spin')
	ax3.set_ylabel('SFR')

	#---------------------------------------------------------
	"""
	+ 'gals' son las galaxias en el shell del void
	"""
	
	x = voidsFinal[nv]['x']
	y = voidsFinal[nv]['y']
	z = voidsFinal[nv]['z']
	r = voidsFinal[nv]['r']


	idx1 = tree.query_ball_point([x,y,z],r*rmax)
	idx2 = tree.query_ball_point([x,y,z],r*rmin)
	shell = [g for g in idx1 if g not in idx2]

	gals = gxs[shell]
	print 'N of galaxies:',len(gals)

	#-------------------------------------------------------
	"""
	+ Seleccion de la muestra segun la relacion J vs Mass
	+ Histogramas de Cosenos para las dos poblaciones (#)
	"""
	m,b,rvalue,pvalue,std=scipy.stats.linregress(np.log10(gxs['mass']),np.log10(gxs['sp_n'])) # El ajuste tiene que ser con las 'gxs' (no con las 'gals')
	m1 = -1./m
	b1 = -.7*(m-m1)+b
	b2 = -.3*(m-m1)+b

	b_s = b
	b_i = b


	M = np.log10(gals['mass'])
	S = np.log10(gals['sp_n'])

	#-----------------------------------------------------------
	for sec in [123,456]:
		x = voidsFinal[nv]['x']
		y = voidsFinal[nv]['y']
		z = voidsFinal[nv]['z']
		r = voidsFinal[nv]['r']

		if sec == 123: 
			gals_h = gals[(S > M*m+b_s)]
			n_high = len(gals_h)
			
			#sfr_h = gals_h['SFR']
		else: 
			gals_h = gals[(S < M*m+b_i)]
			n_low = len(gals_h)
			
			#sfr_l = gals_h['SFR']
		print sec
		"""
		+ Calculo de cosenos de angulos 3D 
		+ Histograma de la Distribucion de Cosenos
		+ Histograma de SFR para gxs con Cosenos cercanos y lejanos a 0
		"""
		cos=[]
		cos1=[]
		for i in range(len(gals_h)):
			u = [gals_h[i]['x']-x,gals_h[i]['y']-y,gals_h[i]['z']-z]
			v = gals_h[i]['sp']
			#print 'U:',u,'V:',v
			c = abs( np.dot(u,v)/(np.linalg.norm(u)*np.linalg.norm(v)) )
			cos.append( c )
			cos1.append( c )
			cos1.append( -c )
			#cos.append( np.dot(u,v)/(np.linalg.norm(u)*np.linalg.norm(v)) )

		col_cos = Table.Column(cos,'cos')
		gals_h.add_column(col_cos)

		if sec==123:
			gals_fo_hs = gals_h[gals_h['cos']>.7]
			gals_eo_hs = gals_h[gals_h['cos']<.3]
		else:
			gals_fo_ls = gals_h[gals_h['cos']>.7]
			gals_eo_ls = gals_h[gals_h['cos']<.3]
		
		#----------------------------------------------------
		"""
		+ Calculo y Grafico de la ECDF
		+ Fitteado de la resta ECDF-Recta Lineal Random
		+ Coeffs a1 a2

		"""		
		cos_h = np.sort(cos1)

		ecdf = ECDF(cos_h) # Empirical cumulated distribution function
		y1 = ecdf(cos_h)-(cos_h+1.)/2. # Para cuando tomamos el valor verdadero de cos (no el absoluto) 
									   # Cambia tmb la 'func' de abajo

		def func(x,a,b,c,d,e):
			return a + b*np.sin( np.pi*(x+1.)/2. ) + c*np.sin( 2.*np.pi*(x+1.)/2. ) + d*np.sin( 3.*np.pi*(x+1.)/2. ) + e*np.sin( 4.*np.pi*(x+1.)/2. )
		def dfunc(x,b,c,d,e):
			return np.pi/2.*b*np.cos( np.pi*(x+1.)/2. ) + np.pi*c*np.cos( 2.*np.pi*(x+1.)/2. ) + np.pi*3./2.*d*np.cos( 3.*np.pi*(x+1.)/2. ) + np.pi*2.*e*np.cos( 4.*np.pi*(x+1.)/2. )

		x1 = np.array(cos_h)

		coeffs, cov = curve_fit(func, x1, y1)
		yfit = func(x1,coeffs[0],coeffs[1],coeffs[2],coeffs[3],coeffs[4])
		d_yfit = dfunc(x1,coeffs[1],coeffs[2],coeffs[3],coeffs[4])

		a1 = coeffs[1]
		a2 = coeffs[2]
		a3 = coeffs[3]
		a4 = coeffs[4]
		print 'a1=',a1,'; a2=',a2,'; a3=',a3,'; a4=',a4
	
		if sec==123: 
			ls,label=['b--','High Spin']
			ax1.text(0.4,-0.044,'N of {} Gxs:{}'.format(label,len(gals_h)))
		else: 
			ls,label=['g--','Low Spin']
			ax1.text(0.4,-0.038,'N of {} Gxs:{}'.format(label,len(gals_h)))
		ax1.step(x1,y1)

		ax1.plot(x1,yfit,ls,label=label)

		#Defino esto para los graficos de sigma
		if sec==123:
			hdata = y1
			hdatafit = yfit		
		if sec==456:
			ldata = y1
			ldatafit = yfit		
		
		
	#------------------------------------------------------------------------
	""""
	Plot SFR
	"""
	sfr_hsfo = np.sort(gals_fo_hs['SFR'])
	sfr_hseo = np.sort(gals_eo_hs['SFR'])
	sfr_lsfo = np.sort(gals_fo_ls['SFR'])
	sfr_lseo = np.sort(gals_eo_ls['SFR'])

	#sfr_hsfo = sfr_hsfo[(sfr_hsfo)>10**-3.5]
	#sfr_hseo = sfr_hseo[(sfr_hseo)>10**-3.5]
	#sfr_lsfo = sfr_lsfo[(sfr_lsfo)>10**-3.5]
	#sfr_lseo = sfr_lseo[(sfr_lseo)>10**-3.5]

	y1=ECDF(sfr_hsfo)
	y2=ECDF(sfr_hseo)
	y3=ECDF(sfr_lsfo)
	y4=ECDF(sfr_lseo)

	ax2.step(sfr_hsfo,y1(sfr_hsfo),label='HighSpin FaceOn')
	ax2.step(sfr_hseo,y2(sfr_hseo),ls='--',label='HighSpin EdgeOn')
	ax2.step(sfr_lsfo,y3(sfr_lsfo),label='LowSpin FaceOn')
	ax2.step(sfr_lseo,y4(sfr_lseo),ls='--',label='LowSpin EdgeOn')

	ax2.set_xscale('log')
	ax2.set_xlabel('SFR')
	ax2.set_ylabel('ECDF')
	ax2.legend(loc=4)
	#plt.show()

	#for plot in [ax2,ax3]: 
	
	#	#ax2.boxplot([sfr_l,sfr_h],labels=['Low Spin','High Spin'])
	#	#ax2.set_ylim(-.05,.05)
		
	#	if plot==ax2: #ax2 is High Spin
	#		sfr_fo = gals_fo_hs['SFR']
	#		sfr_eo = gals_eo_hs['SFR']
	#	else:         #ax3 is Low Spin
	#		sfr_fo = gals_fo_ls['SFR']
	#		sfr_eo = gals_eo_ls['SFR']
		
	
	#	#sfr_fo = sfr_fo[sfr_fo!=0]
	#	#sfr_eo = sfr_eo[sfr_eo!=0]

	
	#	mean,std = np.mean(sfr_fo),np.std(sfr_fo)
	
	#	plot.hist(sfr_fo,bins=len(sfr_fo)/2,normed=True)
	#	plot.axvline(sfr_fo.mean(), color='b', linestyle='dashed', linewidth=2)
	#	#plot.set_xscale('log')
	#	#plot.fill_betweenx(range(2),mean-std,mean+std,alpha=.5)
	
	#	mean,std = np.mean(sfr_eo),np.std(sfr_eo)
	
	#	plot.hist(sfr_eo,bins=len(sfr_eo)/2,normed=True,color='g',alpha=.8)
	#	plot.axvline(sfr_eo.mean(), color='g', linestyle='dashed', linewidth=2)
	#	#plot.set_xscale('log')
	#	#plot.fill_betweenx(range(2),mean-std,mean+std,color='g',alpha=.2)
	#----------------------------------------------------
	"""
	+ PARA RANDOMS
	+ Calculo y Grafico de la ECDF
	+ Fitteado de la resta ECDF-Recta Lineal Random
	+ Coeffs a1 a2

	"""
	print 'Calculating randoms'
	nran = np.min((n_high,n_low))
	
#	y1_slice1 = []
#	y1_slice2 = []
#	y1_slice3 = []
	y1_slices = Table()
	for i in range(100):
	#	print '1'
		cos_ = np.random.uniform(0.,1.,nran)
		cos__ = cos_*-1
		
		cos1 = np.concatenate((cos_,cos__))
	#	print '2'
		
		cos_h = np.sort(cos1)

		ecdf = ECDF(cos_h) # Empirical cumulated distribution function
		y1 = ecdf(cos_h)-(cos_h+1.)/2. 
		
		x1 = np.array(cos_h)

		coeffs, cov = curve_fit(func, x1, y1)
		yfit = func(x1,coeffs[0],coeffs[1],coeffs[2],coeffs[3],coeffs[4])
		d_yfit = dfunc(x1,coeffs[1],coeffs[2],coeffs[3],coeffs[4])

		a1_ran = coeffs[1]
		a2_ran = coeffs[2]
		a3_ran = coeffs[3]
		a4_ran = coeffs[4]

		#plot.step(x1,y1,c='#7f7f7f',alpha=0.2,lw=0.5)
		
		# Para calcular errores
	
		#p1, p2, p3 = np.percentile(x1,[25,50,75],interpolation='nearest')
		#y1_slice1.append( y1[np.where(x1==p1)[0][0]] )
		#y1_slice2.append( y1[np.where(x1==p2)[0][0]] )
		#y1_slice3.append( y1[np.where(x1==p3)[0][0]] )

		y1_col = Table.Column(y1,'yran_{}'.format(i))
		y1_slices.add_column(y1_col)
		
	#------------------------------------------------------------------------

	ax1.legend()
	ax1.text(0.4,-0.032,'N of Total Gxs:{}'.format(len(gals)))
	ax1.text(-.95,0.035,'x = {:.3} Mpc'.format(x/1000.))
	ax1.text(-.95,0.029,'y = {:.3} Mpc'.format(y/1000.))
	ax1.text(-.95,0.023,'z = {:.3} Mpc'.format(z/1000.))
	ax1.text(-.95,0.017,'r = {:.3} Mpc'.format(r/1000.))
				
	ax1.set_ylim(-.05,.05)

	# Plot de errores
	
	nerr = 100 # Number of error bars
	percs = np.percentile(x1,np.linspace(0.,100.,nerr),interpolation='nearest')
	
	uperr = []
	loerr = []
	#errors = []
	for i in range(nerr):
		idx = np.where(x1==percs[i])[0][0]
		y1_slice = []
		for col in y1_slices.colnames:
			y1_slice.append( y1_slices[col][idx] )
		uperr.append( np.percentile(y1_slice,84,interpolation='nearest') )
		loerr.append( np.percentile(y1_slice,16,interpolation='nearest') )
		#errors.append( np.percentile(y1_slice,[16,84],interpolation='nearest') )
	
	xerr = 	np.linspace(-1.,1.,nerr)
	ax1.fill_between(xerr,loerr,uperr,alpha=.5)

	asigma = []
	for i in range(nerr):
		asigma.append( np.mean((uperr[i],abs(loerr[i]))) )
	sigma = np.array(asigma)

	sigmaf = scipy.interpolate.interp1d(xerr,sigma,kind='cubic')
	#sigmafit = sigmaf(xerr) 
	#plot.plot(xerr,sigma,'--')
	
	#------------------------------------------------------------------------
	# Graficos de Sigma
	#------------------------------------------------------------------------
	#xl = np.linspace(-1.,1.,len(ldata))
	#xh = np.linspace(-1.,1.,len(hdata))
	
	#hsignal = abs(hdata)/sigmaf(xh) 
	#lsignal = abs(ldata)/sigmaf(xl)
	
	#subplot.set_ylim(-1.,4.5)
	#subplot.plot(xl,np.ones(np.shape(xl)),'k--',alpha=0.8) 
	#subplot.plot(xl,3.*np.ones(np.shape(xl)),':',alpha=0.8,c=seaborn.color_palette()[2]) 
	#subplot.plot(xh,hsignal)
	#subplot.plot(xl,lsignal)
	
	#plt.savefig('Void{}_Alignment.svg'.format(nv))
	#f1.savefig('Void{}_Alignment.pdf'.format(nv))
	#plt.savefig('Void{}_Alignment.png'.format(nv))
	
	plt.show()	
	nv+=1
	
plt.show()
plt.close()

